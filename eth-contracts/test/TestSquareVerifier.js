// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const SquareVerifier = artifacts.require('verifier');
const proof =
{
    "proof": {
    "a": ["0x26e88aa03d5186566bb4540b33d1704f05fe3851910d8fc27c89f997e64e76e2", "0x038184db45429363a35b5808b22ca36a07b57a9a729b9469abeb24dea22b19fd"],
        "b": [["0x174dfee9a4ad743d736c08d59e63f65ce003f3bc6a53f163a72cf5a92dfc4df5", "0x20d437a8db149ac2f33dbffe57221e842a545d55d5b8b3ea8401f6dd4cbcdd22"], ["0x1748a7e7bf4e20b95c488f6cd22b97e1a4a3b97e6d8567faf3e9f2dd56568216", "0x2830a5ce78e0bbcf4b4063124f64aadabb0cd12c3c0392adb90e80d70d33fe22"]],
        "c": ["0x0acb35f554bbd3cc8f6655ceca48cadb63f4e60f99f455b43cf6b03ba3652c18", "0x2dd58f707316c16349c047f5d8517c336d73faad0ba2517e1e5dfc7d6445ffdb"]
},
    "inputs": ["0x0000000000000000000000000000000000000000000000000000000000000009", "0x0000000000000000000000000000000000000000000000000000000000000001"]
}

contract('TestVerifier', accounts => {
    describe('Exercise Verifier', function(){
        beforeEach(async function(){
            this.contract = await SquareVerifier.new();
        });

        // Test verification with correct proof
        // - use the contents from proof.json generated from zokrates steps
        it('should verify with the correct proof', async function(){
            let result = await this.contract.verifyTx.call(proof.proof.a, proof.proof.b , proof.proof.c, proof.inputs);
            assert.equal(result, true)
        });

        // Test verification with incorrect proof
        it('should NOT verify with the incorrect proof', async function () {
            let incorrectInputs = [
                "0x0000000000000000000000000000000000000000000000000000000000000001",
                "0x0000000000000000000000000000000000000000000000000000000000000001"
            ];
            let result = await this.contract.verifyTx.call(proof.proof.a, proof.proof.b, proof.proof.c, incorrectInputs);
            assert.equal(result, false);
        });
    });
});